{"version":3,"sources":["features/home/home.tsx","common/utils/useDispatch.ts","features/bitstamp/bitstamp.tsx","features/coinbase/state.ts","common/utils/useSelector.ts","features/coinbase/coinbase.tsx","app.tsx","store.ts","index.tsx","common/images/company-logo-cover.png","common/images/bitstamp-logo.svg","common/images/coinbase-logo.png"],"names":["CompanyLogo","styled","CardMedia","Button","muiStyled","MuiButton","spacing","StyledLink","Link","Home","Fade","timeout","in","image","companyLogo","title","CardContent","to","mt","fullWidth","variant","color","useDispatch","genericUseDispatch","TextField","MuiTextField","Bitstamp","CardContentContainer","CardHeader","avatar","IconButton","aria-label","size","action","style","height","width","paddingTop","src","bitstampLogo","label","type","defaultAuthState","pending","success","accessToken","undefined","error","defaultAccountsState","accounts","reducers","Redux","auth","state","produce","draft","useSelector","genericUseSelector","Card","MuiCard","LoggedIn","dispatch","castedAccounts","coinbase","React","useEffect","getState","a","api","get","headers","Authorization","response","data","map","e","i","elevation","Typography","gutterBottom","component","name","balance","amount","currency","ml","Coinbase","code","query","URLSearchParams","useLocation","search","history","useHistory","authToken","push","params","append","post","access_token","useState","open","setOpen","handleClose","event","borderRadius","marginTop","marginRight","coinbaseLogo","CircularProgress","onClick","window","location","href","Snackbar","autoHideDuration","onClose","severity","BackgroundContainer","div","PickCompanyCard","theme","createMuiTheme","palette","primary","light","main","dark","secondary","App","CssBaseline","path","axios","create","rootReducer","CoinbaseReducers","store","composeWithDevTools","thunkMiddleware","withExtraArgument","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.588c6a03.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  Fade,\r\n  CardContent,\r\n  Button as MuiButton,\r\n  CardMedia,\r\n  styled as muiStyled,\r\n} from \"@material-ui/core\";\r\nimport { spacing } from \"@material-ui/system\";\r\n\r\nimport companyLogo from \"common/images/company-logo-cover.png\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst CompanyLogo = styled(CardMedia)`\r\n  width: 400px;\r\n  height: 125px;\r\n  border-bottom: solid 1px #d3d3d3;\r\n`;\r\n\r\nconst Button = muiStyled(MuiButton)(spacing);\r\n\r\nconst StyledLink = styled(Link)`\r\n  text-decoration: none;\r\n`;\r\n\r\nfunction Home() {\r\n  return (\r\n    <Fade timeout={2000} in={true}>\r\n      <div>\r\n        <CompanyLogo image={companyLogo} title=\"Crypto App Logo\" />\r\n        <CardContent>\r\n          <StyledLink to=\"/bitstamp\">\r\n            <Button mt={2} fullWidth variant=\"outlined\" color=\"primary\">\r\n              Log into Bitstamp\r\n            </Button>\r\n          </StyledLink>\r\n          <StyledLink to=\"/coinbase\">\r\n            <Button mt={2} fullWidth variant=\"outlined\" color=\"secondary\">\r\n              Log into Coinbase\r\n            </Button>\r\n          </StyledLink>\r\n        </CardContent>\r\n      </div>\r\n    </Fade>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import { ThunkDispatch } from \"redux-thunk\";\r\nimport { useDispatch as genericUseDispatch } from \"react-redux\";\r\nimport { AxiosInstance } from \"axios\";\r\n\r\nimport { RootState, PlainActions } from \"store\";\r\n\r\n/**\r\n * A state-aware, action-aware and middlware-aware—that's a lot of awarness—version of the plain useDispatch\r\n */\r\nconst useDispatch: () => ThunkDispatch<\r\n  RootState,\r\n  ThunkExtra, // make this an API client, this is the `extra` argument in a thunk\r\n  PlainActions\r\n> = genericUseDispatch;\r\n\r\n/**\r\n * An interface to dispatch to a designated api\r\n */\r\n\r\ninterface ThunkExtra {\r\n  api: AxiosInstance;\r\n}\r\n\r\nexport default useDispatch;\r\n","import React from \"react\";\r\nimport { CardContentContainer } from \"app\";\r\nimport {\r\n  Button as MuiButton,\r\n  CardHeader,\r\n  IconButton,\r\n  CardContent,\r\n  TextField as MuiTextField,\r\n  styled as muiStyled,\r\n  Fade,\r\n} from \"@material-ui/core\";\r\nimport { spacing } from \"@material-ui/system\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n\r\nimport bitstampLogo from \"common/images/bitstamp-logo.svg\";\r\nimport useDispatch from \"common/utils/useDispatch\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Button = muiStyled(MuiButton)(spacing);\r\nconst TextField = muiStyled(MuiTextField)(spacing);\r\n\r\nfunction Bitstamp() {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Fade timeout={2000} in={true}>\r\n      <CardContentContainer>\r\n        <CardHeader\r\n          avatar={\r\n            <Link to=\"/home\">\r\n              <IconButton aria-label=\"back\" size=\"small\">\r\n                <ArrowBackIcon />\r\n              </IconButton>\r\n            </Link>\r\n          }\r\n          action={\r\n            <img\r\n              style={{\r\n                height: 50,\r\n                width: 50,\r\n                paddingTop: 10,\r\n              }}\r\n              src={bitstampLogo}\r\n              title=\"Bitstamp Logo\"\r\n            />\r\n          }\r\n        ></CardHeader>\r\n        <CardContent>\r\n          <TextField\r\n            mt={2}\r\n            label=\"Customer ID *\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n          />\r\n          <TextField\r\n            mt={2}\r\n            label=\"API Key *\"\r\n            variant=\"outlined\"\r\n            type=\"password\"\r\n            fullWidth\r\n          />\r\n          <TextField\r\n            mt={2}\r\n            label=\"API Secret *\"\r\n            variant=\"outlined\"\r\n            type=\"password\"\r\n            fullWidth\r\n          />\r\n          <Button mt={2} fullWidth variant=\"contained\" color=\"primary\">\r\n            Authenticate Key\r\n          </Button>\r\n        </CardContent>\r\n      </CardContentContainer>\r\n    </Fade>\r\n  );\r\n}\r\n\r\nexport default Bitstamp;\r\n","import { Reducer } from \"react\";\r\nimport produce from \"immer\";\r\nimport exhaustivenessCheck from \"common/utils/exhaustivenessCheck\";\r\nimport { ThunkAction } from \"store\";\r\nimport * as Redux from \"redux\";\r\n\r\nexport interface Account {\r\n  name: string;\r\n  type: string;\r\n  balance: { amount: string; currency: string };\r\n}\r\n\r\n// Plain actions\r\ninterface AuthStarted {\r\n  type: \"coinbase/auth/started\";\r\n}\r\n\r\ninterface AuthFinished {\r\n  type: \"coinbase/auth/finished\";\r\n  success: boolean;\r\n  accessToken?: string;\r\n  error?: string;\r\n}\r\n\r\ninterface AccountsStarted {\r\n  type: \"coinbase/accounts/started\";\r\n}\r\n\r\ninterface AccountsFinished {\r\n  type: \"coinbase/accounts/finished\";\r\n  accounts?: Account[];\r\n  error?: string;\r\n}\r\n\r\nexport type AuthActions = AuthStarted | AuthFinished;\r\nexport type AccountActions = AccountsStarted | AccountsFinished;\r\n\r\n// States\r\ninterface AuthState {\r\n  pending: boolean;\r\n  success: boolean;\r\n  accessToken: string | undefined;\r\n  error: string | undefined;\r\n}\r\n\r\nconst defaultAuthState: AuthState = {\r\n  pending: false,\r\n  success: false,\r\n  accessToken: undefined,\r\n  error: undefined,\r\n};\r\n\r\ninterface AccountsState {\r\n  pending: boolean;\r\n  accounts: Account[] | undefined;\r\n  error: string | undefined;\r\n}\r\n\r\nconst defaultAccountsState: AccountsState = {\r\n  pending: false,\r\n  accounts: undefined,\r\n  error: undefined,\r\n};\r\n\r\n// Reducers\r\n\r\nexport const loginReducer: Reducer<AuthState, AuthActions> = (\r\n  state = defaultAuthState,\r\n  action\r\n) =>\r\n  produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case \"coinbase/auth/started\":\r\n        draft.pending = true;\r\n        return;\r\n\r\n      case \"coinbase/auth/finished\":\r\n        draft.pending = false;\r\n        draft.success = action.success;\r\n        draft.accessToken = action.accessToken;\r\n        draft.error = action.error;\r\n        return;\r\n\r\n      default:\r\n        exhaustivenessCheck(action);\r\n    }\r\n  });\r\n\r\nexport const accountsReducer: Reducer<AccountsState, AccountActions> = (\r\n  state = defaultAccountsState,\r\n  action\r\n) =>\r\n  produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case \"coinbase/accounts/started\":\r\n        draft.pending = true;\r\n        return;\r\n\r\n      case \"coinbase/accounts/finished\":\r\n        draft.pending = false;\r\n        draft.accounts = action.accounts;\r\n        draft.error = action.error;\r\n        return;\r\n\r\n      default:\r\n        exhaustivenessCheck(action);\r\n    }\r\n  });\r\n\r\ninterface TokenResponse {\r\n  access_token: string;\r\n  token_type: string;\r\n  expires_in: number;\r\n  refresh_token: string;\r\n  scope: string;\r\n  created_at: number;\r\n}\r\n\r\ninterface AccountsResponse {\r\n  data: Account[];\r\n}\r\n\r\n/**\r\n * Tries to authenticate the user with given code\r\n * @param code code returned by coinbase OAuth2\r\n */\r\nexport const doCoinbaseLogin = (\r\n  code: string\r\n): ThunkAction<Promise<void>> => async (dispatch, getState, { api }) => {\r\n  dispatch({ type: \"coinbase/auth/started\" });\r\n\r\n  try {\r\n    // Create a x-www-form-urlencoded post body\r\n    const params = new URLSearchParams();\r\n    params.append(\"grant_type\", \"authorization_code\");\r\n    params.append(\"code\", code);\r\n    params.append(\r\n      \"client_id\",\r\n      \"6acfc527a0e140861665040c76bab83dc417b884a021d82eacc4beb43fd6b230\"\r\n    );\r\n    params.append(\r\n      \"client_secret\",\r\n      \"530a57f121d9ca93e1fa9601988a5b491c2feba1cf0f298a7b7622d54353c12c\"\r\n    );\r\n    params.append(\"redirect_uri\", \"http://localhost:3000/coinbase\");\r\n\r\n    const response = await api.post<TokenResponse>(\r\n      \"https://api.coinbase.com/oauth/token\",\r\n      params\r\n    );\r\n\r\n    dispatch({\r\n      type: \"coinbase/auth/finished\",\r\n      success: true,\r\n      accessToken: response.data.access_token,\r\n    });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: \"coinbase/auth/finished\",\r\n      success: false,\r\n      error: \"Something went horribly wrong\",\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves the accounts belonging to a user\r\n */\r\nexport const doGetCoinbaseAccounts = (): ThunkAction<Promise<void>> => async (\r\n  dispatch,\r\n  getState,\r\n  { api }\r\n) => {\r\n  dispatch({ type: \"coinbase/accounts/started\" });\r\n\r\n  try {\r\n    const { accessToken } = getState().coinbase.auth;\r\n    const response = await api.get<AccountsResponse>(\r\n      \"https://api.coinbase.com/v2/accounts\",\r\n      { headers: { Authorization: \"Bearer \" + accessToken } }\r\n    );\r\n\r\n    dispatch({\r\n      type: \"coinbase/accounts/finished\",\r\n      accounts: response.data.data,\r\n    });\r\n  } catch (e) {\r\n    dispatch({\r\n      type: \"coinbase/accounts/finished\",\r\n      error: \"Failed to retrieve accounts\",\r\n    });\r\n  }\r\n};\r\n\r\nexport const reducers = Redux.combineReducers({\r\n  auth: loginReducer,\r\n  accounts: accountsReducer,\r\n});\r\n","import {\r\n  useSelector as genericUseSelector,\r\n  TypedUseSelectorHook,\r\n} from \"react-redux\";\r\n\r\nimport { RootState } from \"store\";\r\n\r\n/**\r\n * State-aware version of the plain useSelector\r\n */\r\nconst useSelector: TypedUseSelectorHook<RootState> = genericUseSelector;\r\n\r\nexport default useSelector;\r\n","import React, { SyntheticEvent } from \"react\";\r\nimport { CardContentContainer } from \"app\";\r\nimport {\r\n  Button as MuiButton,\r\n  CardHeader,\r\n  IconButton,\r\n  CardContent,\r\n  TextField as MuiTextField,\r\n  styled as muiStyled,\r\n  Fade,\r\n  CircularProgress,\r\n  Card as MuiCard,\r\n  Snackbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { spacing } from \"@material-ui/system\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n\r\nimport coinbaseLogo from \"common/images/coinbase-logo.png\";\r\nimport { Link, useLocation, useHistory } from \"react-router-dom\";\r\nimport useDispatch from \"common/utils/useDispatch\";\r\nimport { doCoinbaseLogin, doGetCoinbaseAccounts, Account } from \"./state\";\r\nimport useSelector from \"common/utils/useSelector\";\r\n\r\nconst Button = muiStyled(MuiButton)(spacing);\r\nconst Card = muiStyled(MuiCard)(spacing);\r\nconst TextField = muiStyled(MuiTextField)(spacing);\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction Coinbase() {\r\n  // We can keep track of the query params here\r\n  const query = useQuery();\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const { pending, success } = useSelector((state) => state.coinbase.auth);\r\n\r\n  // Check if the user has been authenticated\r\n  const authToken = query.get(\"code\");\r\n  if (authToken) {\r\n    history.push(\"/coinbase\");\r\n    dispatch(doCoinbaseLogin(authToken));\r\n  }\r\n\r\n  // Snackbar functions\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClose = (event: SyntheticEvent<Element, Event>) => {\r\n    setOpen(false);\r\n  };\r\n\r\n  React.useEffect(() => setOpen(success), [success]);\r\n\r\n  return (\r\n    <>\r\n      <Fade timeout={2000} in={true}>\r\n        <CardContentContainer>\r\n          <CardHeader\r\n            avatar={\r\n              <Link to=\"home\">\r\n                <IconButton aria-label=\"back\" size=\"small\">\r\n                  <ArrowBackIcon />\r\n                </IconButton>\r\n              </Link>\r\n            }\r\n            action={\r\n              <img\r\n                style={{\r\n                  borderRadius: 50,\r\n                  height: 40,\r\n                  width: 40,\r\n                  marginTop: 10,\r\n                  marginRight: 5,\r\n                }}\r\n                src={coinbaseLogo}\r\n                title=\"Coinbase Logo\"\r\n              />\r\n            }\r\n          ></CardHeader>\r\n          <CardContent>\r\n            {success ? (\r\n              <>\r\n                <div></div>\r\n                <LoggedIn />\r\n              </>\r\n            ) : pending ? (\r\n              <CircularProgress />\r\n            ) : (\r\n              <Button\r\n                onClick={() =>\r\n                  (window.location.href =\r\n                    \"https://www.coinbase.com/oauth/authorize?client_id=6acfc527a0e140861665040c76bab83dc417b884a021d82eacc4beb43fd6b230&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fcoinbase&response_type=code&scope=wallet%3Aaccounts%3Aread\")\r\n                }\r\n                mt={2}\r\n                fullWidth\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n              >\r\n                Log In\r\n              </Button>\r\n            )}\r\n          </CardContent>\r\n        </CardContentContainer>\r\n      </Fade>\r\n\r\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <MuiAlert\r\n          elevation={6}\r\n          variant=\"filled\"\r\n          onClose={handleClose}\r\n          severity=\"success\"\r\n        >\r\n          Successfully Authenticated with Coinbase!\r\n        </MuiAlert>\r\n      </Snackbar>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction LoggedIn() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { accounts } = useSelector((state) => state.coinbase.accounts);\r\n\r\n  const castedAccounts = accounts as Account[];\r\n\r\n  React.useEffect(() => {\r\n    dispatch(doGetCoinbaseAccounts());\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {!!castedAccounts &&\r\n        castedAccounts.map((e, i) =>\r\n          i < 2 ? (\r\n            <Fade timeout={2000} in={true}>\r\n              <Card elevation={2} mt={2}>\r\n                <CardContent>\r\n                  <Typography gutterBottom variant=\"h6\" component=\"h3\">\r\n                    {e.name}\r\n                  </Typography>{\" \"}\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    color=\"textSecondary\"\r\n                    component=\"p\"\r\n                  >\r\n                    {e.balance.amount} {e.balance.currency}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Fade>\r\n          ) : null\r\n        )}\r\n      <TextField\r\n        mt={4}\r\n        label=\"Purchase Amount *\"\r\n        variant=\"outlined\"\r\n        color=\"secondary\"\r\n        fullWidth\r\n      />\r\n      <Button mt={2} variant=\"outlined\" color=\"secondary\">\r\n        Place BTC Order\r\n      </Button>\r\n      <Button mt={2} ml={1} variant=\"outlined\" color=\"secondary\">\r\n        Place ETH Order\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Coinbase;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { styled as muiStyled } from \"@material-ui/core/styles\";\r\nimport { spacing } from \"@material-ui/system\";\r\nimport MuiButton from \"@material-ui/core/Button\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n\r\nimport {\r\n  Card,\r\n  createMuiTheme,\r\n  MuiThemeProvider,\r\n  CssBaseline,\r\n  Fade,\r\n  TextField as MuiTextField,\r\n} from \"@material-ui/core\";\r\n\r\nimport Home from \"features/home/home\";\r\nimport Bitstamp from \"features/bitstamp/bitstamp\";\r\nimport Coinbase from \"features/coinbase/coinbase\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nconst BackgroundContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  max-height: 100vh;\r\n  background-color: #f5f5f5;\r\n`;\r\n\r\nconst PickCompanyCard = styled(Card)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  min-width: 400px;\r\n`;\r\n\r\nexport const CardContentContainer = styled.div`\r\n  width: 400px;\r\n`;\r\n\r\nconst theme = createMuiTheme({\r\n  spacing: 8,\r\n  palette: {\r\n    primary: {\r\n      light: \"#43b16d\",\r\n      main: \"#159e49\",\r\n      dark: \"#0e6e33\",\r\n    },\r\n    secondary: {\r\n      light: \"#4474f3\",\r\n      main: \"#1652F0\",\r\n      dark: \"#0f39a8\",\r\n    },\r\n  },\r\n});\r\n\r\nexport function App() {\r\n  return (\r\n    <MuiThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <BackgroundContainer>\r\n        <PickCompanyCard>\r\n          <Switch>\r\n            <Route path=\"/home\">\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/bitstamp\">\r\n              <Bitstamp />\r\n            </Route>\r\n            <Route path=\"/coinbase\">\r\n              <Coinbase />\r\n            </Route>\r\n            <Redirect to=\"/home\" />\r\n          </Switch>\r\n        </PickCompanyCard>\r\n      </BackgroundContainer>\r\n    </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import * as Redux from \"redux\";\r\nimport axios, { AxiosInstance } from \"axios\";\r\nimport thunkMiddleware, { ThunkAction as BaseThunkAction } from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport {\r\n  AuthActions as CoinbaseAuthActions,\r\n  AccountActions as CoinbaseAccountActions,\r\n  reducers as CoinbaseReducers,\r\n} from \"features/coinbase/state\";\r\n\r\nexport const api: AxiosInstance = axios.create({});\r\n\r\nconst rootReducer = Redux.combineReducers({ coinbase: CoinbaseReducers });\r\n\r\n/**\r\n * The whole shape of our application state\r\n */\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\n/**\r\n * Union of all supported application actions\r\n */\r\nexport type PlainActions = CoinbaseAuthActions | CoinbaseAccountActions; // add other actions as union\r\n\r\ninterface ThunkExtra {\r\n  /** Axios instance bound to the API. */\r\n  api: typeof api;\r\n}\r\n\r\n/**\r\n * A thunk returned by a thunk-creator.\r\n */\r\nexport type ThunkAction<R> = BaseThunkAction<\r\n  R | Promise<R>,\r\n  RootState,\r\n  ThunkExtra /* this is the extra argument again */,\r\n  PlainActions\r\n>;\r\n\r\n/**\r\n * Redux store\r\n */\r\nexport const store = Redux.createStore(\r\n  rootReducer,\r\n  composeWithDevTools(\r\n    Redux.applyMiddleware(thunkMiddleware.withExtraArgument({ api }))\r\n  )\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./app\";\r\n\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"store\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    scrollbar-width: thin;\r\n    scrollbar-color: gray gray;\r\n  }\r\n  \r\n  *::-webkit-scrollbar {\r\n    width: 4px;\r\n  }\r\n  *::-webkit-scrollbar-thumb {\r\n    background-color: gray;\r\n    border-radius: 20px;\r\n  }\r\n`;\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <Provider store={store}>\r\n      <React.StrictMode>\r\n        <GlobalStyle />\r\n        <App />\r\n      </React.StrictMode>\r\n    </Provider>\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/company-logo-cover.27e8ae6a.png\";","module.exports = __webpack_public_path__ + \"static/media/bitstamp-logo.692dcf7c.svg\";","module.exports = __webpack_public_path__ + \"static/media/coinbase-logo.3745fb4e.png\";"],"sourceRoot":""}